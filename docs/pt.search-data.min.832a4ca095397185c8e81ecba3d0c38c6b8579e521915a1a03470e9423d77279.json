[{"id":0,"href":"/hydra-docs-v2/pt/docs/learning/getting-started/","title":"Começando","section":"Learning","content":" Começando # Este documento é uma introdução à criação de visuais ao vivo usando o Hydra. Abrange o básico da escrita de código no navegador para gerar e combinar fontes de vídeo em tempo real. Nenhuma experiência com programação ou vídeo é necessária!\nEste tutorial é pensado para ser usado dentro do editor web hydra. Também é interativo \u0026ndash; podemos alterar o código em cada bloco para ver como isso afeta os visuais.\nConhecendo o editor do navegador # Para começar, abra o editor web hydra em uma janela separada. Feche a janela em destaque clicando no [x] no canto superior direito.\nVocê verá alguns visuais coloridos em segundo plano com textos no canto superior esquerdo da tela. Este é o código que gera os visuais ao fundo.\nNo canto superior direito, você encontrará uma barra de ferramentas com estes botões: Executar tudo executa todo o código na página (tecla de atalho *ctrl+shift+enter). Fazer upload para a galeria envia o sketch para a galeria da Hydra e cria um curto URL. Limpar editor redefine o ambiente e limpa o texto do editor. Mostrar um sketch aleatório carrega exemplos de esboços aleatórios. Sempre é uma boa maneira de aprender Hydra estudando o código de outra pessoa. Aplicar mudanças aleatórias modifica valores automaticamente. Experimente com alguns dos exemplos de esboço. Mostrar janela de informação mostra uma janela em sobreposição com texto de ajuda e links Primeira linha de código # Use o botão clear all para apagar o sketch anterior.\nEm seguida, digite ou cole o seguinte no editor:\nosc().out() Aperte o botão run para executar este código e atualizar os visuais. Você verá algumas listras rolando na tela.\nIsso cria um oscilador visual. Tente modificar os parâmetros do oscilador colocando um número dentro dos parênteses de osc(), por exemplo osc(10).out().\nExecute novamente o código pressionando o botão run novamente e vendo a atualização do visual. Tente adicionar outros valores para controlar os parâmetros frequency (frequência), sync (sincronização) e color offset (deslocamento de cor) do oscilador.\nDica: você também pode usar o atalho ‘ctrl + shift + enter’ para ter o mesmo efeito do botão executar.\nAdicionando transformações # Podemos adicionar outra transformação ao oscilador acima, adicionando a função rotate() depois do oscilador:\nComo você pode ver, temos primeiro uma fonte de entrada osc() ae as coisas que vêm depois (rotate() and out()) são conectadas com um ponto \u0026lsquo;.\u0026rsquo; Nesse sentido, Hydra é inspirado por síntese modular (inglês). Em vez de conectar cabos, você conecta diferentes tipos de funções javascript.\nfonte Sandin Image Processor # Podemos continuar adicionando transformações a esta cadeia de funções. Por exemplo:\nRepetir:\nPara obter mais fontes e transformações disponíveis, consulte a referência interativa de funções (inglês). A lógica é começar com uma source (fonte) (como osc(), shape(), ou noise()), e depois adicionar transformações a geometry (geometria) e color (cor) (como .rotate(), .kaleid(), .pixelate()), e no final sempre conecte a cadeia de transformações à tela de saída .out().\nO que é um erro? # Às vezes, você tentará executar uma linha de código e nada acontecerá. Se você tiver um erro, notará um texto em vermelho na parte inferior esquerda da tela. Algo como ‘Unexpected token ‘.’ (em vermelho) aparecerá. Isso não afeta seu código, mas você não poderá continuar codificando até corrigir o erro. Geralmente é um erro de digitação ou algo relacionado à sintaxe.\nO que é um comentário? # // Olá, sou uma linha de comentários. Eu sou um texto que não vai mudar o seu código. Você pode escrever anotações, seu nome ou até mesmo um poema aqui. Salve seu esboço na internet # Ao avaliar todo o código com o botão run ou com shift + ctrl + enter, o Hydra gera automaticamente uma URL que contém as últimas alterações do seu esboço. Podemos copiar e colar o url da barra de URL para salvá-lo ou compartilhá-lo com outras pessoas. É possível também usar as setas voltar e avançar do navegador para navegar para versões anteriores de seu esboço.\nUsando a webcam # Além de usar fontes de dentro do Hydra (como osc() e shape()), podemos usar o Hydra para processar fontes de vídeo externas, como uma webcam. Para inicializar a webcam, execute o seguinte código:\ns0.initCam() Isso ativa a fonte da webcam dentro de uma variável chamada s0, e você deve ver a luz da sua webcam acender. No entanto, você ainda não verá a imagem da webcam na tela. Para usar a câmera em um esboço Hydra, você precisa usá-la dentro da função src().\nSemelhante à adição de transformações acima, podemos adicionar transformações de cor e geometria à saída da câmera, adicionando funções à cadeia:\nCaso tenha várias webcams, poderá acessá-las separadamente adicionando um número dentro de initCam, por exemplo s0.initCam(1) ou s0.initCam(2).\nSaídas múltiplas # Por padrão, o Hydra contém quatro saídas virtuais separadas que podem renderizar visuais diferentes e ser misturadas entre si para criar visuais mais complexos. As variáveis o0, o1, o2 e o3 correspondem às diferentes saídas.\nPara ver todas as quatro saídas de uma vez, use a função render(). Isso dividirá a tela em quatro, mostrando cada saída em uma seção diferente da tela.\nUsar uma variável diferente dentro da função .out() renderiza a cadeia para uma saída diferente. Por exemplo, .out(o1) renderizará uma cadeia de funções para o buffer gráfico o1.\nPor padrão, apenas a saída o0 é renderizada na tela, enquanto o comando render() divide a tela em quatro. Mostre uma saída específica na tela adicionando-a dentro de render(), por exemplo, render(o2) para mostrar o buffer o2.\nDica: tente criar esboços diferentes e trocá-los em sua performance ao vivo ou até mesmo combiná-los.\nCombinando várias fontes juntas # Podemos usar funções blend (mescla/mistura) para combinar várias fontes visuais. .blend() combina as cores de duas fontes para criar uma terceira fonte.\nTente adicionar transformações às fontes acima (como osc(10).rotate(0, 0.1).out(o1)) para ver como isso afeta a imagem combinada. Podemos também especificar a quantidade de mistura adicionando um parâmetro separado a .blend(), por exemplo .blend(o1, 0.9).\nHá vários modos de mescla (inglês) em Hydra, semelhantes aos modos de mesclagem que você pode encontrar em um programa gráfico como Photoshop ou GIMP. Veja a referência de funções (inglês) para mais possibilidades.\nModulação # Enquanto funções blend combinam as cores de duas fontes visuais, as funções modulate (modulação) usam as cores de uma fonte para afetar a geometria da segunda fonte. Isso cria uma espécie de efeito de deformação ou distorção. Uma analogia no mundo real seria olhar através de uma janela de vidro texturizada. modulate() não altera cor ou luminosidade, mas distorce uma fonte visual usando outra fonte visual.\nUsando as mesmas fontes acima, podemos usar um oscilador para modular ou distorcer a imagem da câmera:\nVocê pode adicionar um segundo parâmetro à função modulate() para controlar a quantidade de distorção: modulate(o1, 0.9). Neste caso, os canais vermelho e verde do oscilador estão sendo convertidos em deslocamento x e y da imagem da câmera.\nTodas as transformações de geometria têm funções de modulação correspondentes que permitem usar uma fonte para distorcer outra fonte. Por exemplo, modulateRotate() é semelhante a rotate(), porém nos permite aplicar diferentes intensidades de rotação em diferentes partes da fonte visual. Veja a referência de funções para mais exemplos.\nMais combinações e modulações # Além de usar várias saídas para juntar imagens, podemos também pode combinar várias fontes dentro da mesma cadeia de funções, sem transformá-las em saídas separadas.\nIsto permite utilizar muitas fontes, modos de combinação e modulação, tudo a partir da mesma cadeia de funções.\nDica: use ctrl + shift + f no editor web para formatar automaticamente seu código.\nModulando com a câmera # Cobrimos agora todos os tipos básicos de funções dentro de Hydra: source, geometry, color, blending, e modulation! Descubra onde você pode chegar combinando elas.\nAproveite! # Tradução por A1219 e Vagné L.\n"},{"id":1,"href":"/hydra-docs-v2/pt/docs/learning/additional-topics/","title":"Tópicos Adicionais","section":"Learning","content":" Tópicos Adicionais # live coding: avaliar linhas ou blocos de código separado # Pressione ctrl+enter para executar uma linha de código. Pressione shift+ctrl+enter para avaliar um bloco de código. Dica: podemos alternar entre diferentes linhas de código para uma performance de live coding.\nosc().out() // executar esta primeira noise().mult(osc(10,0.1,10)).out() // experimente este arrays # Arrays (listas) em Hydra são uma coleção sequenciada de valores. Podem ser usadas para alterar vários parâmetros no tempo.\nosc(10,0.1,[10,0,2,0.5]).out() shape([3,4,200,2]).out() audio # Faça visuais reativos a áudio. O sinal de áudio funciona como um parâmetro de entrada e podemos multiplicar este valor a fim de alterar a quantidade de mudanças.\nosc(20,0.1, ()=\u0026gt;a.ff[0]*10).out() funções glsl personalizadas: https://hydra-book.glitch.me/#/glsl (inglês) # do documento antigo: # Passando funções como variáveis # Cada parâmetro pode ser definido como uma função ao invés de uma variável estática. Por exemplo,\nosc(function(){return 100 * Math.sin(time * 0.1)}).out() modifica a frequência do oscilador em uma função do tempo (tempo é uma variável global que representa os segundos que passaram desde o carregamento da página). Isto pode ser escrito de forma mais concisa usando a sintaxe es6:\nosc(() =\u0026gt; (100 * Math.sin(time * 0.1))).out() Captura da área de trabalho # Abra um diálogo para selecionar uma aba de tela a ser usada como textura de entrada:\ns0.initScreen() src(s0).out() Conectando a streams remotos # Qualquer instância de Hydra pode usar outras instâncias/janelas contendo Hydra como fontes de entrada, desde que estejam conectadas à internet e não bloqueadas por um firewall. Hydra usa a webrtc (webstreaming em tempo real) em segundo plano para compartilhar fluxos de vídeo entre janelas abertas. O módulo incluso rtc-patch-bay gerencia conexões entre janelas conectadas e também pode ser usado como um módulo autônomo para converter qualquer website em uma fonte dentro de Hydra (veja fonte de câmera autônoma abaixo, por exemplo).\nPara começar, abra Hydra simultaneamente em duas janelas separadas. Em uma das janelas, defina um nome para a fonte de patch-bay dada:\npb.setName(\u0026#34;myGraphics\u0026#34;) O título da janela deve mudar para o nome inserido em setName().\nA partir da outra janela, inicie \u0026ldquo;myGraphics\u0026rdquo; como uma fonte de stream.\ns0.initStream(\u0026#34;myGraphics\u0026#34;) renderize para a tela:\ns0.initStream(\u0026#34;myGraphics\u0026#34;) src(s0).out() As conexões às vezes levam alguns segundos para serem estabelecidas; abra o console do navegador para ver o progresso. Para listar as fontes disponíveis, digite o seguinte no console:\npb.list() Usando p5.js com Hydra # // Inicializa uma nova instância p5. Só é necessário chamar uma vez p5 = new P5() // {width: window.innerWidth, height:window.innerHeight, mode: \u0026#39;P2D\u0026#39;} // desenha um retângulo no ponto 300, 100 p5.rect(300, 100, 100, 100) // Note que P5 roda em modo instância, portanto, todas as funções precisam começar com a variável onde P5 foi inicializado (neste caso p5) // referência para P5: https://P5js.org/reference/ (inglês) // explicação do modo de instância: https://github.com/processing/P5.js/wiki/Global-and-instance-mode (inglês) // Durante o livecoding, a função \u0026#34;setup()\u0026#34; do P5.js basicamente não tem utilidade; qualquer coisa que for chamada em setup pode simplesmente ser chamada fora de qualquer função. p5.clear() for(var i = 0; i \u0026lt; 100; i++){ p5.fill(i*10, i%30, 255) p5.rect(i*20, 200, 10,200) } // Para programar animações ao vivo, você pode redefinir a função de desenho do P5 da seguinte forma: // (um retângulo que segue o mouse) p5.draw = () =\u0026gt; { p5.fill(p5.mouseX/5, p5.mouseY/5, 255, 100) p5.rect(p5.mouseX, p5.mouseY, 30, 150) } // Para usar P5 como entrada para Hydra, basta usar o canvas como fonte: s0.init({src: p5.canvas}) // Depois, renderize o canvas src(s0).repeat().out() Carregando scripts externos # A função await loadScript() permite carregar outras bibliotecas empacotadas Javascript dentro do editor da Hydra. Qualquer código Javascript pode ser executado no editor Hydra.\nAqui está um exemplo usando o Three.js no editor web:\nawait loadScript(\u0026#34;https://threejs.org/build/three.js\u0026#34;) scene = new THREE.Scene() camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000) renderer = new THREE.WebGLRenderer() renderer.setSize(width, height) material = new THREE.MeshBasicMaterial({color: 0x00ff00}) geometry = new THREE.BoxGeometry() cube = new THREE.Mesh(geometry, material); scene.add(cube) camera.position.z = 1.5 // \u0026#39;update\u0026#39; é uma função reservada que será executada toda vez que o contexto de renderização principal de Hydra for atualizado update = () =\u0026gt; { cube.rotation.x += 0.01; cube.rotation.y += 0.01; renderer.render( scene, camera ); } s0.init({ src: renderer.domElement }) src(s0).repeat().out() E aqui está um exemplo carregando a biblioteca Tone.js:\nawait loadScript(\u0026#34;https://unpkg.com/tone\u0026#34;) synth = new Tone.Synth().toDestination(); synth.triggerAttackRelease(\u0026#34;C4\u0026#34;, \u0026#34;8n\u0026#34;); Responsividade a áudio # A funcionalidade FFT está disponível por meio de um objeto de áudio acessado via \u0026ldquo;a\u0026rdquo;. O editor usa https://github.com/meyda/meyda para análise de áudio. Para mostrar os compartimentos fft,\na.show() Defina o número de compartimentos fft:\na.setBins(6) Acesse o valor do compartimento mais à esquerda (frequência mais baixa):\na.fft[0] Use o valor para controlar uma variável:\nosc(10, 0, () =\u0026gt; (a.fft[0]*4)) .out() É possível calibrar a responsividade alterando o valor mínimo e máximo detectado (representado por linhas de desfoque sobre o fft). Para definir o valor mínimo detectado:\na.setCutoff(4) Definir a escala altera o intervalo detectado.\na.setScale(2) fft[\u0026lt;índice\u0026gt;] retornará um valor entre 0 e 1, onde 0 representa o corte e 1 corresponde ao máximo.\nVocê pode definir a suavização entre as leituras de nível de áudio (valores entre 0 e 1). 0 corresponde a nenhuma suavização (mais saltos, tempo de reação mais rápido), enquanto 1 significa que o valor nunca mudará.\na.setSmooth(0.8) Para ocultar a onda de áudio:\na.hide() MIDI (experimental) # Controladores MIDI podem trabalhar com Hydra via WebMIDI. Um exemplo pode ser visto em /docs/midi.md.\nTradução por A1219 e Vagné L.\n"}]