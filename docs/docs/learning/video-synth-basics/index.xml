<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hydra video synth</title>
    <link>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/</link>
    <description>Recent content on hydra video synth</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sources</title>
      <link>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/src/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/src/</guid>
      <description>Source # noise # noise( scale = 10, offset = 0.1 )
Generate Perlin noise.
voronoi # voronoi( scale = 5, speed = 0.3, blending = 0.3 )
Generate voronoi shapes.
osc # osc( frequency = 60, sync = 0.1, offset )
shape # shape( sides = 3, radius = 0.3, smoothing = 0.01 )
gradient # gradient( speed )
src # src( tex ) Accepts a texture, such as external source (s0, s1, s2, s3) or an output (o0, o1, o2, o3)</description>
    </item>
    
    <item>
      <title>Geometry</title>
      <link>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/coord/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/coord/</guid>
      <description>Geometry # rotate # rotate( angle = 10, speed )
Rotate texture.
scale # scale( amount = 1.5, xMult = 1, yMult = 1, offsetX = 0.5, offsetY = 0.5 )
Scale texture.
pixelate # pixelate( pixelX = 20, pixelY = 20 )
Pixelate texture with pixelX segments and pixelY segments.
repeat # repeat( repeatX = 3, repeatY = 3, offsetX, offsetY )
repeatX # repeatX( reps = 3, offset )</description>
    </item>
    
    <item>
      <title>Color</title>
      <link>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/color/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/color/</guid>
      <description>Color # posterize # posterize( bins = 3, gamma = 0.6 )
shift # shift( r = 0.5, g, b, a )
invert # invert( amount = 1 )
Invert color.
contrast # contrast( amount = 1.6 )
Larger amount value makes higher contrast.
brightness # brightness( amount = 0.4 )
luma # luma( threshold = 0.5, tolerance = 0.1 )
thresh # thresh( threshold = 0.5, tolerance = 0.</description>
    </item>
    
    <item>
      <title>External sources: webcam, video, canvas</title>
      <link>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/external-sources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/external-sources/</guid>
      <description>External Sources # Using the webcam # In addition to using sources from within hydra (such as osc() and shape()), you can use hydra to process external video sources such as a webcam. External sources in hydra are referenced using predefined objects s0, s1, s2, and s3. To initialize the webcam in s0, run the following code:
s0.initCam() This activates the webcam source inside a variable called s0, and you should see the light on your webcam light up.</description>
    </item>
    
    <item>
      <title>Blend</title>
      <link>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/combine/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/combine/</guid>
      <description>Multiple outputs # By default, hydra contains four separate virtual outputs that can each render different visuals, and can be mixed with each other to create more complex visuals. The variables o0, o1, o2, and o3 correspond to the different outputs.
To see all four of the outputs at once, use the render() function. This will divide the screen into four, showing each output in a different section of the screen.</description>
    </item>
    
    <item>
      <title>Modulate</title>
      <link>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/combinecoord/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/combinecoord/</guid>
      <description>Modulation # While blend functions combine the colors from two visual sources, modulate functions use the colors from one source to affect the geometry of the second source. This creates a sort of warping or distorting effect. An analogy in the real world would be looking through a texture glass window. modulate() does not change color or luminosity but distorts one visual source using another visual source.
Using the same sources from above, we can use an oscillator to modulate or warp the camera image:</description>
    </item>
    
    <item>
      <title>Synth Settings</title>
      <link>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/settings/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://hydra.ojack.xyz/docs/docs/learning/video-synth-basics/settings/</guid>
      <description>Synth Settings # Functions and settings that affect overall hydra behavor and rendering.
render # render( texture = all )
// default osc(30,0.1,1.5).out(o0) noise().out(o1) solid(1).out(o2) gradient().out(o3) render() update # update( )
setResolution # setResolution( width, height )
// make the canvas small (100 pixel x 100 pixel) setResolution(100,100) osc().out(o0) hush # hush( )
// clear the buffers osc().out(o0) hush() setFunction # setFunction( options )
speed # speed = 1</description>
    </item>
    
  </channel>
</rss>
